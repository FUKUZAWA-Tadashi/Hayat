● メモリ容量を知りたい

Hayat::Common::gMemPool->totalFreeSize() を呼ぶと、残りメモリ量の
合計が返ってきますが、断片化しているので正確ではありません。
メモリ領域1つにつきメモリ管理領域が4〜8バイト使われるので、断片化状況
により数値は変化します。
Hayat::Common::gMemPool->getUsed() を呼ぶと使用メモリ量の合計が
返ってきます。これは全メモリ量からtotalFreeSize()を引いたものと同じです。
Hayat::Common::gMemPool->percentUsed() を呼ぶと、使用メモリ量が
全メモリ量の何パーセントになるかを返します。

Hayat::Common::gMemPool->coalesce() を呼ぶと、断片化したメモリの
うち、隣りあった2つ以上のフリーなメモリ領域をくっつけて、大きな
1つのメモリ領域にします。

※以下デバッグビルド時のみ
Hayat::Common::gMemPool->maxFreeCellSize() を呼ぶと、ガーベジ
コレクションの直後に最大であったフリーなメモリ領域のサイズが返ります。
このサイズを越える連続したメモリ領域を確保する事はできません。


● メモリリークがあるっぽい

common/hyMemPool.h の中の HMD_DEBUG_MEMORY_ID をdefineしておく。
これは、HMD_DEBUG時にはdefineされるようになっている。

デバッグ機能で、以下の関数を呼ぶようにしておく。
Hayat::Common::gMemPool->printCellInfo();
メモリ使用状況がデバッグ表示されるので、チェックする。
特にバイトコードを読み替えたタイミングを中心に調べる。
消えるべきものが残っていたらそこが怪しい。
Thread,Contextが残っている場合、C++側で解放忘れがあると考えられる。
バイトコードを解放していない場合、FBUF,BYTC が使用している数より多く
残る事になる。

