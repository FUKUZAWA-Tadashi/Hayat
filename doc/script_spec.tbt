Hayatスクリプト仕様

	文法
		文の区切り
			基本的に行末が文の区切りになる。
			演算子の後やカンマの後などの行末は、次の行に継続と見なされる。
		複文
			セミコロンで区切って、複数の文を1行に書く事ができる。
			複数の文を { } でくくってまとめて1つの文として扱う事ができる。
		コメント
			// から 行末 まではコメントとなる。
			/* から */ まではコメントとなる。複数行可。ネスティング可。
		識別子
			アルファベット、数字、_ (アンダースコア)、全角文字 を使用できる。
			全角文字は、"　"(全角スペース)、"「","」"(かぎ括弧) の3文字は識別子としては使用できない。
			大文字、小文字を区別する。
			末尾の1文字に限って、 ? または ! を使用できる。

			\@@が頭に付く	クラス変数	\@@aaa, @@ASD, @クラス変数
			\@が頭に付く	メンバ変数	\@asd, @Qwe22, @メンバ1
			$が頭に付く	グローバル変数	$abc, $XYZ, $Foo, $フラグ_A00
			頭に $,@ が付かない識別子は、定数名、クラス名、ローカル変数名、メソッド名、メソッド仮引数名 に使う事ができる。

			const 宣言で代入した識別子は定数となる。
			|const ConstantVar = 100

			先頭が半角アルファベット大文字、続きが半角アルファベット大文字または半角数字またはアンダースコアのみで構成される識別子は、const宣言しなくても定数となる。
			|CONST_VAR_1 = 1   // const宣言していないが定数
				定数と判別される識別子を、ローカル変数として使う方法は無い。

		enum
			定数は、enum を使う事で 0 から順番に整数値を割当てる事ができる。
			|enum { ZERO, ONE, TWO, THREE }

		リテラル
			整数(32bit符号付き)
				10進数	-2147483648 〜 2147483648
				2進数	0bで始まる
				8進数	0oで始まる
				16進数	0xで始まる
			浮動小数(32bit)
				|12.34, 1.234e1, 1234e-2
			文字列定数
				両端を " で挟む。
				文字列中では、\ は特殊な文字
					\\n は改行コード
					それ以外の場合は\は次の1文字をエスケープする
						\\\ は \ 1文字
						\\" は文字列の終端ではない " 1文字
				例: "aaaaaa", "foo bar\n\\ \"asd qwe\"  "
			Bool
				論理値
				true	真
				false	偽
			Nil
				nil
					C言語の NULL に似ている。
					変数等は通常 nil で初期化される。
			self
				C++での this とほぼ同じ。
				違うのは、thisはポインタだがselfは参照である事。
			シンボル
				\: で始まる。識別子に使っている文字を使用できる。
					例) :Symbol , :foo_bar , :_abc1xyz?
				記号を含むシンボルは、ダブルクォートで囲う。
					例) :"+", :"==", :"x="
				余談：内部的には2バイト整数に変換されている。
					同じシンボルは同じ整数となる。
					2バイトでは不足する事態が発生する可能性あり…
			配列リテラル
				[ ] でくくった値の列。 Arrayクラスのオブジェクト。
				例) [1,2,3]
				例) [10, false, 3.5, "foo"]
			リストリテラル
				'( ) でくくった値の列。 Listクラスのオブジェクト。
				例) '(1,2,3)
				例) '(10, '("foo", 20), '(:bar, 30))

			sayCommand文字列
				「 」 でくくられた文字列。
				複数行に渡っていても良い。
				文字列定数と同じく \ は特殊文字として扱われる。
				行頭行末の空白文字(半角スペース、タブ、CR、全角スペース)は削除される。
					行頭の空白文字は常に削除。
					行末の空白文字は、テキストファイルとして見た時に存在がわからないようなものは削除するという方針。
					それ以外の途中にある空白文字はそのまま使用する。
					行頭行末に空白文字を入れたければ、 \ を使ってエスケープする。
				{ } で囲って式または代入文を書く事ができる。
					式の値は sayCommand 関数に渡される。
					{# } のように、先頭の2文字を {# にすると、式の計算だけ行なって sayCommand 関数には渡さない。
						{ と # の間を空けてはいけない。
				コンパイル時に、プログラムに変換される。
					|x「こんにちは、{yourName}さん。
					|  ごきげんいかが{#flag=true}？」
					↓
					|x.sayCommandStart(1,2)
					|x.sayCommand("こんにちは、")
					|x.sayCommand(yourName)
					|x.sayCommand("さん。\n")
					|x.sayCommand("ごきげんいかが")
					|flag=true
					|x.sayCommand("？")
					|x.sayCommandEnd()
					文字列は、改行や { } で区切られて分割されて sayCommand に渡される。
				sayCommandStart(), sayCommand(), sayCommandEnd() はインスタンスメソッド。
				特定のインスタンスに実行させたい場合は、「 の前にインスタンスを記述する。
					|dragon「がおー」
					インスタンスの後に . は不要。
				sayCommandStartに渡される2つの引数は、1つ目はsayCommand通し番号、2つ目は文字列の行数。
				sayCommand文字列を使うためには、対象となるインスタンスが3つのメソッドを持っていて適切に処理するようになっていれば良い。
				インスタンスを指定しない場合、new StringBuffer() がインスタンスとして作られて使用される。
					|sb = new StringBuffer()					
					|sb「1 + 2 = {1+2}」
					|func(sb)
					|// 上の3行と下の1行の動作は同じになる。(変数sbの存在を除いて)
					|func(「1 + 2 = {1+2}」)

		演算子
			優先順位順
				(), []	後置演算子(引数は括弧の中に書く)
				->	後置演算子(引数はクロージャ)
				-, +, !	前置演算子
				**	右結合
				*, /, %	左結合
				+, -	左結合
				~	前置演算子
				&	左結合
				\|, ^	左結合
				<=>, ==, ===, !=, <>, <, <=, >, >=	非結合
				&&	左結合
				\||	左結合
				.., ..<	非結合
				? :	三項演算子
				not	前置演算子
				and	左結合
				or	左結合

				二項演算子には、左結合、右結合、非結合の3種類がある。
				左結合は、同順位演算子が並んだ時に左を優先する。
					|x + y + z  →   (x + y) + z
				右結合は、同順位演算子が並んだ時に右を優先する。
					|x ** y ** z  →   x ** (y ** z)
				非結合は、同順位演算子を並べる事ができない。
					|x == y <= z  →  エラー

				&&, ||, and, or 演算子は、ショートカットを行なう。
					true || f()  を実行した時、f() が呼び出される事はない。
					false && g()  を実行した時、g() が呼び出される事はない。

				三項演算子は、2番目の項と3番目の項に三項演算子を含む式を書く事ができる。
					a ? b : c ? d : e は、 a ? b : (c ? d : e) と等価
					1番目の項に三項演算子を含む式を書きたい場合は、( ) で括る必要がある。
						(a ? b : c) ? d : e


			代入文、自己代入演算子
				|=, *=, /=, %=, +=, -=, &=, |=, ^=, &&=, ||=
				代入演算子は、二項演算をした後に代入をする。
				非結合なので、 a = b = c = 0 といった代入はできない。(C言語は右結合なので可能)
			配列アクセス演算子
				[], []=
				1次元配列アクセスが可能。
				|a = new Array(3)
				|a[0] = 100
				|a[1] = 200
				|x = a[1] - a[0]
				ユーザー定義のクラスでも、[] 演算子を定義する事で配列のような形でのアクセスが可能。
				|class Hoge
				|  def initialize (n) { @fuga = new Array(n) }
				|  def "[]" (index) { return @fuga[index - 10] }
				|  def "[]=" (val,index) { @fuga[index - 10] = val }
				|end

		メソッド呼び出し
			foobar(param)	自クラスのインスタンスメソッド呼び出し、自クラスのクラスメソッド呼び出し、組込み関数呼び出し
			obj.method(param1,param2,param3)	オブジェクトのインスタンスメソッド呼び出し
			SomeClass.method()	クラスメソッド呼び出し

			()演算子を使用すると、メソッド呼出しのような形式で演算子を実行できる。
				|f = lambda(x){x + 10}
				|f(20)    // => 30
				|g = new Method(10, :"+")
				|g(20)    // => 30

			引数が無い場合、() を省略可能。
				→参考：メンバ変数アクセス getterメソッド

		メンバ変数アクセス
			メンバ変数は、オブジェクトの外からアクセスできる。
				|class Sample
				|  def initialize() { @var = 0 }
				|end
				|a = new Sample()
				|a.var += 10    // a の @var の値に 10 が足される

			setter,getter
				getterメソッド、setterメソッドを定義する事で、メンバ変数へのアクセスの代わりにメソッドを呼び出す事ができる。
				|class Sample
				|  def initialize() { @v = 0 }
				|  def var () { @v }
				|  def var= (x) { @v = x }
				|end
				|a = new Sample()
				|a.var += 10    // a の @v の値に 10 が足される
				getterメソッドは名前そのままで、引数無しのものである。
				setterメソッドは名前の末尾に = が付いたもので、1つの引数を取るものである。
				メンバ変数と同じ名前のsetter,getterメソッドが存在する場合は、メソッドの方を優先する。



		制御構造
			if 〜 else
				条件式は、false または nil だけ偽で、他の値は真とみなされる。
				|if (条件式)
				|   文
				|else
				|   文

				以前のバージョンにあった elsif は無くなった。 else if を使う。
				|if (条件式)
				|   文
				|else if (条件式)
				|   文
				|else
				|   文

				elseが無く条件式がfalseだった場合、if文終了時の値はnilになる。

			loop
				無限ループ
				|loop
				|   文

				break文で中断した場合、loop文終了時の値break文の直前に実行した文の値になる。

			while
				条件ループ
				|while (条件式)
				|   文

				条件式がfalseまたはnilで終了した場合、while文終了時の値はnilになる。
				break文で中断した場合、while文終了時の値break文の直前に実行した文の値になる。

			for
				初期化、再初期化ありの条件ループ
				|for ( 初期化式 ; 条件式 ; 再初期化式 )
				|   文

				初期化式は最初に1度だけ実行される。
				条件式がfalseまたはnilでない間、文を実行し、再初期化式を実行する。
				文中で next が実行されると、再初期化式の実行部分にジャンプする。
				初期化式と再初期化式は省略可能で、式または代入文またはブロックを書ける。
				条件式は式またはブロックが書ける。省略はできない。

				for文終了時の値はwhileと同じ。


			break
				ループの中で使うと、ループを抜ける。
			next
				loopの中で使うと、文の先頭に戻る。
				whileの中で使うと、条件式の判断の前に戻る。
				forの中で使うと、再初期化式の実行部分にジャンプする。

			return
				メソッドを終了し、呼び出し元へ戻る。
				|return 戻り値
				クロージャ中での return は、2種類の動作がある。
					クロージャを呼び出したルーチンに戻る
					クロージャを生成したルーチンからリターンする
				クロージャを call() で呼び出した場合は前者、 callAway() で呼び出した場合は後者の動作をする。
				後者の場合、生成したルーチンが既に終了している事がありうるが、その場合戻る場所が無いのでエラーとなる。


			goto
				指定ラベルにジャンプし、戻らない。
				|label :foo
				|   ……
				|goto :foo

				メソッドをまたいだジャンプが可能。メソッド呼出しを戻る方向のみ可能。
					例外処理の一種と考えて良い
				|def asd () {
				|  goto :bar
				|}
				|def foo () {
				|  label :bar
				|  asd()
				|}
				|foo()  // 無限ループする

				飛び先には、直前に実行していた文の値を運ぶ。
				|def qwe () {
				|  10 + 20
				|  goto :baz
				|  30 + 40
				|  label :baz
				|}
				|qwe()  // 30

			switch
				複数の条件分岐
				|switch (式) {
				|case 式 [,式...]
				|  文 ...
				|case 式 [,式...]
				|  文 ...
				|[default
				|  文...]
				|}
				switch文の式の値と、case節の式の値を ==演算子 で比較して、等しければ続く文を実行する。
				case節には式を複数書く事ができ、どれかが等しければ続く文を実行する。
					左から順番に比較していき、等しいものがあれば、それ以降の式は評価しない。
				1つのcase節の実行が終わった後、別のcase節は無視してswitch文を脱出する。
					C++のようなbreak文は必要ない。
				switch文自体の値は、最後に実行した文の値となる。
					case節を実行せず、default節も無く、実行した文が無いならば、nilとなる。

				|switch (x) {
				|case 1
				|  f(10)    // x==1なら、ここを実行
				|case 2,"abc",3.14
				|  f(20)    // x==2, x=="abc", x==3.14 のどれかがtrueなら、
				|  g(30)    // ここまで実行
				|case 5,3+a(4),"xyz";  f(40);g(50)
				|    // x==5ならf(40);g(50)を実行
				|    // 3+a(4)を実行してその値がxと等しければ、f(40);g(50)を実行
				|    // x=="xyz"ならf(40);g(50)を実行
				|default
				|  f(100)   // 上のどれにも当てはまらなければ、
				|  f(200)   // ここまで実行
				|}




		例外処理
			try 〜 catch 〜 finally, throw
				try節の実行中に例外が発生すると、catch節にジャンプする。
				throw文で例外を発生させる事ができる。
					任意の値を例外オブジェクトに乗せる事ができる。
				catch節で変数を指定すると、そこに例外(Exception)オブジェクトが代入される。
				|def foo () { throw 123 }
				|try {
				|  foo()
				|} catch (e) {
				|  p(e.val())  // => 123
				|}
				catchでは変数指定を省略する事が可能。この場合例外オブジェクトは捨てられる。
				|catch { … }

				throwでは、例外タイプをシンボルで指定する事ができる。
					省略すると :exception となる
				|throw :mysignal, 234

				例外タイプはException::type()で取得できる。
				例外タイプが :fatal_error のものはcatchする事ができない。

				catch節またはcatchされなかったtry節を抜ける時、必ずfinally節が実行される。
				throwによってtryまたはcatchを抜けた場合、finallyの中でthrowまたはreturnを実行せずにfinallyが終了した後、throwの続きが実行される。
				returnによってtryまたはcatchを抜けた場合、finallyの中でthrowまたはreturnを実行せずにfinallyが終了した後、returnの続きが実行される。
				finally節中で throw または return が実行された場合、try,catch 中での throw,return の実行は中止される。
				finally節自体の値は、try,catch節の値に影響を与えない。


		クロージャ
			lambda 文にてクロージャ(無名関数)を生成できる。
			|lambda (引数1,引数2,...) { … }
			引数を省略すると、(*args_) を指定した事になる。
				以下の2つはまったく同じ。
				|lambda { … }
				|lambda (*args_) { … }

			クロージャオブジェクトは、callメソッドで実行可能。
				|f = lambda(x,y){x + y}
				|p(f.call(1,2))   // => 3
			クロージャの外側のローカル変数を参照可能で、外側のメソッドが実行終了したとしてもローカル変数は消えない。
				|def foo () {
				|  a = 10
				|  f = lambda(x){x + a}
				|  p(f.call(5))  // => 15
				|  a = 20
				|  p(f.call(5))  // => 25
				|  return f
				|}
				|g = foo()
				|p(g.call(10))  // => 30

			クロージャは、メソッドに引数として渡す時に、( ) の外側に書く事ができる。その時は lambda (...) を書かず、 { の次に引数を | と | ではさんで書く。
				|def f (c) { c.call(1) }
				|p(f(lambda(x){x+1})) // => 2
				|p(f(){|x| x + 1})   // => 2
			クロージャをメソッドの外に書く時、クロージャ以外のメソッドの引数が0個ならば、メソッド引数自体を省略できる。
				|p(f{|x| x + 1})   // => 2
			クロージャの引数を省略すると、 |*args_| を指定したのと同じ事になる。
				|def g (x,y,c) { x + y + c.call() }
				|p(g(1,2){3+4})   // => 10
			call()メソッドの代わりに、後置()演算子を使用できる。
				|f = lambda(x,y){x + y}
				|p(f.call(1,2))  // => 3
				|p(f(1,2))       // => 3



		Fiber
			new Fiber { … } でファイバーを作成できる。
			defFiber にて定義したメソッドは、Fiberオブジェクトを返すメソッドになる。
				|defFiber asd() { … } 
				は、
				|def asd () {
				|  return new Fiber {
				|    …
				|  }
				|}
				とほぼ同じ。(バイトコードレベルでは異なる)
			Fiberはyield文を実行する事により、処理を一時停止した状態で呼び出し元プログラムに処理を移す事ができる。
				go() で yield または return まで実行する。
				getYieldVal() で yield文で与えられた値を取得できる。

			例： nからmまで1つずつ増えていく整数を提供するファイバー
			|defFiber range(n,m) {
			|  for ( ; n <= m; n += 1) {
			|    yield n
			|  }
			|}

			iterate()メソッドとクロージャの組合せで、イテレータとして動作できる。
				"->"演算子を使うと書きやすい。
			|range(2,4).iterate(lambda(x){ foo(x) })
			|range(2,4).iterate{|x| foo(x) }
			|range(2,4)->{|x| foo(x) }
			この3つは同じ動作をし、foo(2), foo(3), foo(4) を実行する。
			さらにメソッドオーバーロードを利用すると、-> も省略できる。
			|def range(n,m,f) { range(n,m).iterate(f) }
			|range(2,4){|x| foo(x) }


			例：素数を計算するプログラム
			|defFiber genFrom (n) {
			|  for ( ; true; n += 1) {
			|    yield n
			|  }
			|}
			|defFiber sieve (gen) {
			|  x = gen.generate()
			|  yield x
			|  z = sieve(gen.filter{|i| i % x <> 0})
			|  loop { yield z.generate() }
			|}
			|sieve(genFrom(2)).take(10).toArray()  // => [2,3,5,7,11,13,17,19,23,29]
			sieveメソッドは
				fiberから最初の値を受け取る
				それをyieldで外部に提供する
				fiberから次々に値を受け取り、その内で最初の値では割り切れない値だけを外部に提供し続けるような新たなfiberをfilter()で作る
				それを再帰的にsieveに渡し、そこから受け取った値を外部に提供し続けるという動作をする。
				最初のsieve()に渡されるfiberはgenFrom(2)なので、2,3,4,5,6,... という値を提供する。
				fiberから最初の1つを受け取り、外部に提供(yield)する。
				次の再帰的なsieve()に渡されるfiberは、3,4,5,6,7,... のうちで2で割り切れない 3,5,7,9,11,13,... を提供する。
				さらに次のsieve()に渡されるfiberは、5,7,9,11,13,15,... のうちで3で割り切れない 5,7,11,13,17,... を提供する。
				…
				loopでは、それぞれのfiberから提供された最初の値を受け取り、それを外部に提供する。
				take(10)で10個分を取り出し、toArray()で配列に格納すると、素数10個の配列ができる。

		
		多重代入
			左辺が複数ある代入文
				|a,b = 1,2
				|x,y = y,x
				上の例では、a==1, b==2 となる。
				下の例では、x と y の値が交換される。

			左辺値の前に * を付けると、複数の値を受け取る事ができる。受け取った値は List または Fiber に格納された形になっており、1つずつ取り出すには、each()を使えば良い。
				|a,*b = 1,2,3,4,5
				|x = b.toArray()
				x は [2,3,4,5] となる。

			右辺値の前に * を付けると、複数の値を渡す事ができる。渡す値は Array,List など、each() で1つずつ値を取り出す事が可能なもの、もしくは Fiber でなければならない。
				|x = [5,7,11]
				|a,b,c,d,e = 2,3,*x
				a==2, b==3, c==5, d==7, e==11 となる。

			左辺にリスト構文を使って、ネスティングできる。対応する右辺は、 each() で1つずつ値を取り出せるものを指定する。
				|a,'(b,c) = 1,'(2,3)	c==3
				|a,'(b,c) = 1,[2,3]	c==3
				|a,'(b,*c) = 1,'(2,3,4,5)	c.toArray() == [3,4,5]

			* は、基本的に右辺も左辺も最後にしか置けない。但し、ネスティングが複数ある時、それぞれの最後に置く事はできる。
				|a,'(b,*c),'(d,*e),*f = 1,'(2),'(3,4,5),6,7	c.toArray()==[], e.each().toArray()==[4,5]

			* は、基本的に右辺も左辺も最後にしか置けない。但し、ネスティングが複数ある時、それぞれの最後に置く事はできる。
				|a,'(b,*c),'(d,*e),*f = 1,'(2),'(3,4,5),6,7	c.each().toArray()==[], e.each().toArray()==[4,5]

			ネスティングと * を併用する事で、同じ動作をする多重代入文を複数種類書く事ができる
				|a = '(1,2,3)
				|    の時、
				|x,y,z = *a
				|    と
				|'(x,y,z) = a
				|    と
				|'(x,y,z) = '(*a)
				|    は、同じ結果となる。

				x に * を付けて使用する事が可能ならば、 x と '(*x) は同じ効果をもたらす。
					実際には状況に応じて List になったり Fiber になったりするので、内部動作は同一ではない。


			match case 構文
				|match (右辺値) {
				|case (左辺値) { }
				|case (左辺値) { }
				| ...
				|default { }
				|}
				複数の左辺値のうち、右辺値が代入可能ものを上から順番に調べていき、代入可能だったらそれに対応するプログラムを実行する。どれにも代入可能でなければ、defaultを実行する。

				例
					|match (*a) {
					|case () { Ａ }
					|case (x,*y) { Ｂ }
					|case (x,y,*z) { Ｃ }
					|default { Ｄ }
					|}
					a = '() ならば、Ａを実行する。
					a = '(1,2)ならば、Ｂを実行する。
					Ｃのcase文にも代入可能なものは、全てＢのcase文にも代入可能なので、ＢのcaseにマッチしなければＣのcaseにもマッチしないので、Ｃが実行される事はない。
					a = 1 ならば *a は展開できないので、どんなcase文ともマッチする事はなく、default文に対応するＤを実行する。

			Signature
				多重代入の値の並びを区別する表記法
					通常値の並びは、並んだ個数
					*は、*
					ネスティングは ( )
					右辺で*を展開した結果、内容が尽きた時は、 /
				例
					値の並び	Signature
					(1,2,3)	(3)
					(a,b,*c)	(2,*)
					(1,2,'(3,4,*x),*y)	(2,(2,*),*)

			メソッドオーバーロード
				異なるSignatureの同名メソッドを定義する事ができる。
				メソッド引数は、多重代入左辺と同じ表記を用いる事ができる。
				メソッド呼出しの時に、引数の値によって、適切なメソッドが検索されて実行される。
					|def f() { Ａ }
					|def f(x,*y) { Ｂ }
					|の2つのメソッド定義がある時、
					|f() はＡを実行し、
					|f(1,2,3) はＢを実行する。

			代入可能判定
				match構文やメソッドオーバーロードでは、左辺値に*やネスティングがある場合には実際の値を調べて代入可能かどうかを判定する。
				以下の場合の動作を追ってみる。
	
				|a = '(0, 1)
				|match (*a) {
				|case () { Ａ }
				|case (x,y,z,*w) { Ｂ }
				|case (x,*y) { Ｃ }
				|default { Ｄ }
				|}
				右辺値である引数 (*a) のSignatureは (*)

				まず () をチェック、左辺Signatureは、(0)
				右辺が空の時にマッチするので、空かどうかを調べるために1つ取り出してみる。
					引数の変化	右辺Signatureの変化
					(*a)	(*)
					(0,*aの残り)	(1,*)
					1つ取り出せたので、空ではないので、マッチしなかった。

				次に、(x,y,z,*w) をチェック、左辺Signatureは、(3,*)
					引数の変化	右辺Signatureの変化
					(0,*aの残り)	(1,*)
					(0,1,*aの残り)	(2,*)
					(0,1)	(2,/)
					右辺は2個しかなく、zに代入できる値がないのでマッチしなかった。

				次に、(x,*y) をチェック、左辺Signatureは、(1,*)
				マッチする。
				xに0を代入し、yには残り全部を代入する。残りの状況によってyはListになったりFiberになったりするが、この場合は単純なのでListになり、'(1)となる。
				そしてＣ文が実行される。

				マッチしたcase文があったので、defaultのＤ文が実行される事はない。

			代入可能判定中のFiberの動作
				代入可能判定時に実際の値を調べる必要がある場合に、右辺値のFiberのプログラムが動作する場合がある。

				|f = 3.times()
				|x,*y = *f
					f は、 0, 1, 2 の3つの整数を順に生成するFiberである。
					この場合、xに代入する値が存在するかどうかを調べるため、Fiber f から値を1つ取り出す。このときFiberのプログラムが動作する。
					この結果、x には 0 が代入され、y には 1,2 の2つの整数を順に生成するFiberが代入される事となる。


				|f = 3.times()
				|*x = *f
					この場合にはFiber f から値を取り出さなくても代入可能だと判定できるので、f のプログラムは動作しないまま x に代入される。

				|f = 5.times()
				|match (*f) {
				|case(x) { Ａ }
				|case(x,y) { Ｂ }
				|}
					Ａを実行すべきかどうか判定するために、fから2つの値が生成され、1つだけではなかったのでＡは実行されなかった。
					次にＢを実行すべきかどうか判定するために、fからもう1つの値が生成され、2つだけではなかったのでＢは実行されなかった。
					最終的にどのcase文ともマッチせず、defaultも無いので、どれも実行されなかった。
					しかし、代入可能判定中に f から3つの値が生成されたので、結果として f はあと2つの値 3,4 を生成するFiberとなった。
					代入可能判定中に生成された3つの値 0,1,2 は、それを受け取る変数が無いので消滅した。


		その他
			wait
				1フレーム待ち
			wait(n)
				nフレーム待ち
			require
				別個コンパイルされたHayatスクリプトとリンクする。
					|require "stdlib"
				stdlib については記述しなくても自動的にリンクされる。
			include
				ファイルをまるごと取り込む。 C の #include と同じ。


	クラス定義
		|class クラス名
		|   定義
		|end
		定義部分には、定数の代入文、クラス変数の代入文、メソッド定義、クラス定義、通常の文など、メンバ変数を使用しない文を書く事ができる。
			クラス定義とメソッド定義以外は、バイトコードをロードした時点でクラス初期化時に実行される。
		クラス定義中にクラス定義を書く事ができる(インナークラス)
			※スコープが未実装なので、現状ではインナークラスと外部のクラスの区別がまったく無い。
		別のクラスから継承できる。
			|class クラス名 < 親クラス名1,親クラス名2,...
			多重継承できる。
			親クラス同士でメンバ変数名等がかぶっている場合、後に指定した親クラスのものが使用される。
			C++のvirtual継承のような機能は無い。

	メソッド定義
		|def メソッド名 (引数) {
		|   定義
		|}
		クラス定義中に書く事ができる。
		引数が無くても ( ) は省略できない。
		最後に実行した文の値がメソッドの戻り値になる。
		インスタンスメソッド定義とクラスメソッド定義の書き方に違いはない。
			クラスメソッド的な呼出し方をされた時、メソッド内でメンバ変数を使用している部分を実行すると、エラーになる。

		引数は、多重代入左辺のような書き方ができる。

		デフォルト引数
			メソッド定義の時には多重代入と異なり、引数にデフォルト値を与える事ができる。
				|def f (a,b=0) { }
				|def f (a,b=1,c=2,d=3,*e) { }
				|def f (a,b=10,*c='(20,30)) { }
				|def f (a,'(b,*c),'(d,e,f=0),*g=[10,20]) { }
			デフォルト引数を与えた後は、デフォルト引数もしくは *付きの引数 のみ続ける事ができる。
			*付き引数の後には他の引数を続ける事はできない。
			*付き引数にデフォルト値を指定しなかった場合、 '() を指定した事になる。
				|def f (a,*b) { }
				|def f (a,*b='()) { }
				この2つは同じ。

			デフォルト値の計算タイミング
				バイトコードを頭から実行していって、def 文が来たタイミングで、左側のデフォルト値から順番に計算され、デフォルト値格納領域に格納される。
				そのタイミングで使用可能なメソッドなどを呼び出す事もできる。
					まだ def 文に到達していないメソッドで、それがデフォルト値を使用するような場合、まだデフォルト値が用意されていないのでエラーとなる。
						|def f (x = g()) { }
						|def g (a = 10) { }
						gの引数aのデフォルト値 10 がまだ用意されないうちに、fの引数xのデフォルト値を計算しようとするため、エラーになってしまう。
						この例の場合、fとgの順番を入れ替えるとエラーにならなくなる。

	演算子定義
		演算子は記号を使っているが、実体はメソッド。
		演算子を " で囲ってメソッド定義と同じように定義する。
			|def "+" (obj) { ... }
			|def "[]" (index) { ... }
			|def "[]=" (val,index) { ... }

	インスタンス生成
		|obj = new クラス名 (引数)
		new演算子によりインスタンスを生成する。
		引数は、インスタンス生成直後に initialize() インスタンスメソッドに渡される。
		組込みクラスの一部は、newでのインスタンス生成はできない。
			|Int, Float, Bool, Nil, Class, String

	クラスライブラリ
		特殊インスタンスメソッド、特殊クラスメソッドは、システムが呼び出すメソッドなので、通常の使用で明示的に呼び出すプログラムを書く事は無い。
			initialize() はコンストラクタであり、 new が呼び出すので、通常は単独では使用しない。
			finalize() はデストラクタであり、ガーベジコレクタが不要メモリを回収するタイミングで呼ばれる。

		Object
			Objectは全てのクラスのスーパークラスという扱いなので、どんなクラスからでも呼出せる。
			クラスメソッド
				p(...)
					引数の値と型をデバッグ出力する。
					各インスタンスの concatToStringBuffer インスタンスメソッドを内部で使用している
				assert(式)
					式がtrueでないならば、エラー停止する
				assertMsg(...)
					最初の式がtrueでないならば、残りの引数を表示してエラー停止する
				warning(...)
					デバッグメッセージを出力
				getRunningThread()  
					現在実行中のスレッドを返す
				sleep()
					現在実行中のスレッドをスリープさせる
			インスタンスメソッド
				getClass()
					クラスを返す
				classSymbol()
					クラスのシンボルを返す
				concatToStringBuffer(sb)
					StringBufferオブジェクトsbの末尾に、文字列表現を追加する
				sameObject?(x)
					参照レベルで同じオブジェクトかどうか調べる
				getMethod(methodSymbol)
					メソッドシンボルから、Methodオブジェクトを作成して返す
						|a = []
						|f = a.getMethod(:push)
						|f(100)    // a.push(100)  =>  a == [100]
						|f(99)     // a.push(99)   =>  a == [100,99]


		Int
			32bit符号付き整数型。
				newでのインスタンス生成はできない。
			演算子
				二項演算は整数型同士でないとできない。
				+ (単項演算子)	単項プラス
				+ (二項演算子)	加算
				- (単項演算子)	単項マイナス
				- (二項演算子)	減算
				*	乗算
				/	除算
				%	剰余
				**	べき乗
				==	比較：等しい時に true
				<=>	比較：左辺が小さい時に -1, 大きい時に 1, 同じ場合は 0
				<>	比較：等しくない時に true
				<	比較：左辺が小さい時に true
				<=	比較：左辺が小さいか等しい時に true
				>	比較：左辺が大きい時に true
				>=	比較：左辺が大きいか等しい時に true
				&	ビットAND
				\|	ビットOR
				^	ビットXOR
				~	(単項演算子) ビットNOT
			インスタンスメソッド
				to_f()	Float化
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、数値の文字列表現を追加する。
				times()	数値の回数だけ繰り返すfiberを作る。

		Float
			32bit浮動小数型。
				newでのインスタンス生成はできない。
			演算子
				二項演算は浮動小数型同士でないとできない。
				+ (単項演算子)	単項プラス
				+ (二項演算子)	加算
				- (単項演算子)	単項マイナス
				- (二項演算子)	減算
				*	乗算
				/	除算
				**	べき乗
				==	比較：等しい時に true
				<=>	比較：左辺が小さい時に -1, 大きい時に 1, 同じ場合は 0
				<>	比較：等しくない時に true
				<	比較：左辺が小さい時に true
				<=	比較：左辺が小さいか等しい時に true
				>	比較：左辺が大きい時に true
				>=	比較：左辺が大きいか等しい時に true
			インスタンスメソッド
				to_i()	0に近い整数にInt化する。
				floor()	元の値を越えない整数にInt化する。
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、数値の文字列表現を追加する。
			クラスメソッド
				sin(f)	浮動小数fの正弦を返す。
				cos(f)	浮動小数fの余弦を返す。

		Bool
			論理値型。
				newでのインスタンス生成はできない。
			演算子
				\!	(単項演算子) 論理否定
				\||	論理和
				&&	論理積
				==	比較：等しい時に true
				<>	比較：等しくない時に true
			インスタンスメソッド
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。

		Nil
			特殊な値 nil の型。
				newでのインスタンス生成はできない。
			インスタンスメソッド
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。
			
		Symbol
			シンボル値型。
				newでのインスタンス生成はできない。
			演算子
				==	比較：等しい時に true
				<>	比較：等しくない時に true
			インスタンスメソッド
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。

		Class
			クラス自体の型。
				クラスを値として取る事も可能。
				newでのインスタンス生成はできない。

		String
			文字列定数型。
				newでのインスタンス生成はできない。
				内部的には末尾にヌル文字 "\0" が付加されている。
			インスタンスメソッド
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。

		Array
			配列型。
				Enumerableを継承しているので、Enumerableのメソッドを使用可能。
				最初に用意したバッファサイズを越えて代入すると、バッファを自動的に拡張する。
				バッファサイズは new でインスタンスを生成する時に指定する。
					| arr = new Array(10)  // バッファサイズ10の配列を生成
				インデックスは 0 が先頭。マイナスの値を指定すると、末尾からの指定となる。-1が末尾の要素。
				現在のサイズを越えて値を取り出すと、nilが返る。
					マイナスのインデックスでサイズを越えると、エラーになる。
						arr の内容が [1,2] の時に arr[-2] は 1 だが、 arr[-3] はエラー。
				現在のサイズを越えて代入すると、間の代入されていない要素はnilになる。
					arr の内容が [1,2] の時(sizeは2)に arr[3] = 9 とすると、[1,2,nil,9] となる。

			インスタンスメソッド
				size()	入っているデータのサイズ。バッファサイズではない。
				clear()	中身を全部削除する。
				[]	値を取り出す。例) x = arr[3]
				[]=	値を代入。例) arr[i] = y
				include?(x)	中身にxが入っていればtrue、入っていなければfalse
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。
				push(x)	末尾に値を追加する。例) arr.push(123)
				each()	各要素をyieldするfiberを作る。
				toArray()	自分自身を返す。
				find(c)	値をクロージャに渡してtrueを返すような最初の値を返す。無ければnilを返す。
				index(x)	xと等しい最初の要素のインデックスを返す。xがクロージャなら、値をクロージャに渡してtrueが帰ってくるような最初のインデックスを返す。
					|[1,3,6,8].index(6)  ==> 2
					|[1,3,6,8].index{|n| n % 4 == 0}   ==> 3
		
		BitArray
			中身がBool型で、1要素に1ビットのみ消費する配列型。
				Enumerableを継承しているので、Enumerableのメソッドを使用可能。
				容量は new でインスタンスを生成する時に指定する。
					| arr = new BitArray(20)   // 20個のBool値を入れられるBitArrayを生成
				インデックスは 0 から size()-1 まで。
					これを越えてアクセスすると、 :array_index_out_of_bounds 例外が発生する。
				初期値は全部 false 。
			インスタンスメソッド
				[]	値を取り出す。例) x = arr[4]
				[]=	値を代入。例) arr[i] = false
					代入する値は、 false または nil の場合には false を代入し、それ以外の場合は true を代入する。
				size()	配列の容量を返す。
				changeSize(newSize)	配列の容量を変更する。増えた場所は false で初期化される。変更した後の自分自身を返す。
				setAll(x)	全ての要素にxを代入する。自分自身を返す。
				setRange(idx1,idx2,x):BitArray	idx1とidx2の間の全ての要素にxを代入する。idx1とidx2を含む。自分自身を返す。
				clone()	新たなBitArrayを生成し、中身をコピーする。
				each()	インデックス0から順に全ての要素をyieldするFiberを作る。
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。


		Hash
			連想配列型。
				任意の値をキーとして任意の値を記憶する連想配列。

			インスタンスメソッド
				[x]	xをキーとして値が入っていればそれを返す。入っていなければnilを返す。
				[x]=	xをキーとして値を記憶する。
				size()	入っているデータの個数
				keys()	全キーを配列に入れて返す
				values()	全ての値を配列に入れて返す
				rehash()	キーオブジェクトのハッシュ値(hachCode())が変化して検索できなくなる場合があるが、rehash()で最新のハッシュ値に基いて連想配列を再構築する。
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に、文字列表現を追加する。

		List
			リスト型。
				Enumerableを継承しているので、Enumerableのメソッドを使用可能。
			インスタンスメソッド
				empty?()	空リストならtrue
				cons(hd)	先頭に要素hdを連結したリストを返す。例) '(1,2).cons(3) → '(3,1,2)
				head()	先頭要素を取得。空リストの場合は例外(タイプ = :empty_list)を発生
				tail()	先頭を除いたリストを取得。空リストの場合は例外(タイプ = :empty_list)を発生
				append(x)	末尾にリストxを連結した新しいリストを作成して返す。元リストに変化無し。
				append!(x)	末尾にリストxを連結する。変化した自分自身を返す。
					selfが空リストだった場合、空リストは変化せず、新しいリストを作成する。そのため、変数に格納されたリストに連結したい場合は注意が必要。
						|a = a.append!(x)
						というようにしないと、aが空リストだった場合にはaが更新されない。
				clone()	中身をコピーした新しいリストを作成して返す。
				toArray()	全要素を入れた配列を作成して返す。
				each()	各要素をyieldするfiberを作る。

			クラスメソッド
				cons(hd,tl)	リストtlの先頭に要素hdを連結した新しいリストを返す。例) List.cons(1,'(2,3)) → '(1,2,3)

		StringBuffer
			内容を変更できる文字列型。
				バッファサイズは new でインスタンスを生成する時に指定する。
					| sb = new StringBuffer(32)  //32バイトの文字列を入れられるバッファを生成する
					実際には数バイト余分に入れられる場合がある。(4byte align にしているため)
				最初に確保したバッファを拡張する機構は持っていない。希望があれば作ります。
				内部的には末尾にヌル文字 "\0" が付加されている。
			インスタンスメソッド
				bufSize()	バッファサイズ = 最大文字列長 (byte)
				length()	文字列長 (byte)
				concat(...)	引数オブジェクトを文字列化して末尾に追加
				clear()	バッファを空にする
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に追加

		Thread
			スレッド。
				オブジェクトを指定して new すると、そのオブジェクトの run() メソッドから開始するスレッドが生成される。
					|thread1 = new Thread(obj)   // スレッド生成
					|thread1.join()              // スレッドの実行が終了するのを待つ
				終了したスレッドオブジェクトを再利用しない事。
			インスタンスメソッド
				join()	実行が終了するまで待つ。

		Exception
			例外クラス。
			インスタンスメソッド
				type()	例外タイプシンボルを取得
				val()	例外値を取得
				setVal()	例外値を設定
				backTraceSize()	バックトレース情報の個数
				backTraceStr(i)	i番目のバックトレース情報をStringBufferで取得
				concatToStringBuffer(sb)	StringBufferオブジェクトsbの末尾に追加

		GC
			ガーベジコレクタ
				mark & sweep 方式のガーベジコレクションをコントロールする
			クラスメソッド
				step()	ガーベジコレクションのステップを1つ進ませる
					unmark → mark → sweep → unmark → …
				collect()	ガーベジコレクションのステップをsweep終了まで進ませる
				coalesce()	隣り合ったフリーなメモリを結合して大きなサイズのメモリ領域を作る
					メモリが細分化されすぎた場合に呼ぶ

		Closure
			クロージャ。
				lambda文により生成される。
			インスタンスメソッド
				call(...)	引数を渡してクロージャを実行する
				callAway(...)	callとほぼ同じだが、クロージャ中のreturn文の意味が、クロージャを生成したルーチンからのリターンとなる。
				run()	callと同じ。Thread生成のために使われる。
			演算子
				()	call()と同じ。

		Method
			メソッド。
				メソッドをオブジェクト化したもの。
					オーバーロード、オーバーライドを含む。
				selfに相当するオブジェクトと、そのselfに対して働くメソッドの名前を指定して生成する。
			コンストラクタ
				new Method(instance, methodSymbol)	インスタンスの持つメソッドをオブジェクト化する
			インスタンスメソッド
				call(...)	メソッドを呼出す
			演算子
				()	call()と同じ。

			
		Enumerable
			繰り返し処理、順次処理など、Fiberを拡張するクラス
			Fiberを返すメソッドeach()を持つクラスがEnumerableを継承すれば、Enumerableのメソッドを全て使う事ができるようになる。
				toArray()	全要素を入れた配列を作成する。
				toList()	全要素を入れたリストを作成する。
				map(f)	各要素をクロージャ f に適用する。fの戻り値をyieldする新たなFiberを作成して返す。
					|3.times().map{|x| x*2}.toArray()  ==> [0,2,4]
				filter(f)	各要素をクロージャ f に渡した結果が true であるような要素だけを取り出す。
					|10.times().filter{|x| x % 3 == 0}.toArray()  ==> [0,3,6,9]
				take(n)	要素の先頭から最大n個を取り出す。
					|5.times().take(3).toArray()  ==> [0,1,2]
					|3.times().take(5).toArray()  ==> [0,1,2]
				find(f)	要素をクロージャ f に渡した結果が true であるような最初の要素を返す。無ければnilを返す。
					|5.times().find{|x| x > 3}  ==> 4
				count(x)	xと等しいものの個数を返す。xがクロージャなら、クロージャに渡してtrueが帰ってくるような値の個数を返す。xを省略するかNilにすると、nilでない値の個数を返す。
					|5.times().count(3)  ==> 1
					|5.times().count{|x| x % 2 == 0}  ==> 3
				index(f)	要素をクロージャ f に渡した結果が true であるような最初の要素が何番目であるかを返す。fがクロージャでない場合は、fと等しい最初の要素の番目を返す。無ければnilを返す。
					|5.times().index(3)  ==> 3
					|5.times().index{|x| x / 2 == 2}  ==> 4
				most(f)	fを省略すると、全要素中の最大値を返す。比較は ">" 演算子で行なう。クロージャfを与えると、">"演算子の代わりにfを使う。
					|5.times().most()  ==> 4
					|5.times().most{|x,m| x < m}  ==> 0

		Fiber
			ファイバ。
				yield文を実行可能。yield文はFiberの中でしか実行する事ができない。
				Enumerableを継承しているので、Enumerableのメソッドを使用可能。
			インスタンスメソッド
				go()	yieldまたはreturnまで実行する。yieldを実行した場合はtrueが返る。
				getYieldVal()	yield値を取得。go()がtrueを返した場合に有効。
				getReturnVal()	return値を取得。go()がfalseを返した場合に有効。
				yieldResult(...)	yieldに戻り値を与える。
				thrown(e)	実行中のyield文に対してExceptionを投げる

				generate()	次のyieldまで実行し、yield値を取得。returnを実行した場合は例外が投げられる。
				generate_noThrow()	generate()とほぼ同じ。returnを実行した場合はその値を返す。Fiberの実行が終了していれば nil を返す。

				iterate(c)	yield値をクロージャに渡しながら繰り返す。
				"->"(c)	iterate(c)と同じ。
				joint(a,b)	a.each(), b.each() をこの順番で実行する。
					|joint(2.times(),3.times()).toArray()  ==> [0,1,0,1,2]


		Bytecode
			バイトコードのリロードを制御
				reload(filename)	バイトコード filename.hyb をリロードする。
					|Bytecode.reload("file1")
				reloadAs(filename,name)	バイトコード filename.hyb を、name.hyb を読んだかのようにリロードする。
					|Bytecode.reloadAs("file2", :file1)
					中身が少し異なる複数のバイトコードを、別ファイル名で置いておく事ができる。
				setClassVarCopiedOnReload(b)	リロード時に、旧バイトコードのクラス変数の内容を、新バイトコードに上書きコピーするかどうかを指定
				setConstVarCopiedOnReload(b)	リロード時に、旧バイトコードの定数値を、新バイトコードに上書きコピーするかどうかを指定
				remains()	リロード後、残っている旧バイトコードの名前をシンボルの配列で返す


	C++との連携
		Hayat VM
			スタックマシン
				Hayatバーチャルマシンはスタックマシンで、値の受け渡しはスタックを介する。
				スクリプトから与えられた引数は、最初の引数から順にスタックに積まれている。引数の数が int numArgs として関数に与えられる。
				インスタンスメソッドの場合はスタックの一番上にそのインスタンスが積まれる。
				クラスメソッドの場合は引数のみが積まれている。
					|obj.method(x1,x2,x3)  の場合には、スタックは
					|[obj, x3, x2, x1] というようになる。(左がスタックトップ)
					|numArgs は 3 になっている。
				スタックに乗る値は、全て Value である。

			Value
				Hayat VMの値はC++レベルでは Valueクラスのインスタンスとして扱う。
				Valueは型情報(type)と値(data)を持つ。
					Int, Float, Bool, Nil, Class, String の場合は、dataが直接その値となる。
					それ以外のクラスの場合は、typeが*REF、dataがポインタ(Object*)となっていて、その先に実体が存在する。
				Valueと各型との変換は、hyValue.h を参照の事。

			シンボル
				型情報、メソッド名、変数名等は、C++では SymbolID_t の値として扱われる。
				コンパイラにより HSymbol.h が自動生成されるので、それを使用する。
					ffioutディレクトリに作成される
				命名ルール
					単純な名前	HSym_名前	name → HSym_name
					頭に * が付いている名前	HSymR_名前	*name → HSymR_name
					記号が含まれる名前	HSymx_16進変換名	<=> → HSymx_3c3d3e

			Object
				Hayatインスタンスを保持する。そのための特定のメモリ領域を確保する。
					Int, Float, Bool, Nil, Class, String はObjectではなくValueでのみ扱う。
				型情報とメンバ変数用領域(フィールド)を持つ
				継承している場合は、スーパークラスObjectへのポインタをフィールドの先頭に持つ。
					継承が多いと、1つのHayatインスタンスがObjectを多く使う事になりメモリ効率は落ちる。

			インスタンスの種類
				3種類に分類される
					基本型
						Valueで扱われる。Objectにならない。
						Int, Float, Bool, Nil, Class, String
					プログラマ定義型
						プログラマがFFIで実装した型。
						Objectになる。
						Objectのフィールドはプログラマが自由に操作する。
						Hayat VMからは、FFIを通してアクセスする。
						(今の所)継承はできない。
					ユーザー定義型
						Hayatスクリプト中で class 宣言して作った型。
						Objectになる。
						ObjectのフィールドはHayat VMが操作する。
						継承が可能。


		FFI (Foreign Function Interface)
			HayatからC++関数を呼び出す仕組み。

			各クラス定義中に、そのクラスに対するFFIを宣言できる。
				|class Foo
				|  c++ {
				|    FFI宣言
				|  }
				|end
			宣言
				メソッド名と、引数、引数の型、戻り値の型を指定できる
				型は省略可能
				可変長引数の場合は ... を指定する
				デフォルト値も指定できる
				|func()					// 引数無し、戻り値の型は不定
				|func(x)					// 引数1個で型は不定、戻り値の型は不定
				|func(x:Int)			// Intの引数1個、戻り値の型は不定
				|func():Float			// 引数無し、戻り値の型は Float
				|func(x:Bool):Nil		// Boolの引数1個、戻り値は nil 固定
				|func(x:Int, y:Float):Bool	// Intの引数とFloatの引数、戻り値は Bool
				|func(...):Int			// 引数の個数は不定、戻り値は Int
				|func(x:Int):Float	// Intの引数1個、戻り値は Float
				|func(x:Int = 0):Int	// Intの引数にデフォルト値 0 を設定
				|func(x:Int, y = 5.0)	// 型不定の引数 y にデフォルト値 5.0 を設定

			Hayatクラス中に、C++クラスを1つ内包する事ができる。(2つ以上内包する事はできない)
				インスタンスを生成すると、C++インスタンスを内部に持つ形で生成される。
				|class Foo
				|  c++ Bar {
				|    ...
				Hayatのクラス Foo は、C++のクラス Bar を内包する。


			スクリプトをコンパイルすると、コンバータが HSca_クラス名.h というヘッダファイルと _HSca_クラス名.cpp という C++ ソースファイルを自動生成する。
				_HSca_クラス名.cpp 内には、プログラマが記述した関数とHayatエンジンとの橋渡しをする関数が自動生成される。
				FFIは HSca_クラス名.cpp という C++ ソースファイルにプログラムする。
				ファイル名先頭のアンダースコア _ に注意。先頭にアンダースコアありのcppファイルはコンバータの自動生成であり、先頭にアンダースコア無しのcppファイルはプログラマが記述する。
				|class Foo
				|  c++ Bar {
				|    ... 

				HSca_Foo.h と _HSca_Foo.cpp が自動生成される。
				HSca_Foo.cpp をプログラマが記述する。

				HSca_Foo.cpp
					まず #include "HSca_Foo.h" とする。このヘッダファイル中にほとんどの必要な定義がされている。
					マクロ定義を用いて、各関数を定義する。
	
					Value FFI_FUNC(func) (Value selfVal, void)			// func()
					Value FFI_FUNC(func) (Value selfVal, Value x)		// func(x)
					Value FFI_FUNC(func) (Value selfVal, s32 x)			// func(x:Int)
					f32 FFI_FUNC(func) (Value selfVal, void)				// func():Float
					void FFI_FUNC(func) (Value selfVal, bool x)			// func(x:Bool):Nil
					bool FFI_FUNC(func) (Value selfVal, s32 x, f32 y)	// func(x:Int, y:Float):Bool
					f32 FFI_FUNC(func) (Value selfVal, s32 x)	// func(x:Int):Float
				インスタンスメソッド呼出しの場合は、第1引数selfValにインスタンスが来る。
				クラスメソッド呼出しの場合は、第1引数selfValにクラスが来る。


			演算子を定義する場合には、メソッド名を文字列表現で記述する。
				単項演算子の + と - は、"+@", "-@" と記述する。
				|  c++ {
				|    "+"(x)
				|    "<="(a)
				|    "+@"()




			Hayatメソッド名がC++で記述できない名前の場合には、FFI_FUNCの替わりに別のマクロを使用する。
				func	FFI_FUNC(func)
				func?	FFI_FUNC_Q(func)
				func!	FFI_FUNC_E(func)
				func=	FFI_FUNC_S(func)
				非asciiメソッド名	FFI_FUNC_X(ascii16進表記)

				例)
					|  c++ {
					|    include?():Bool
					|    "=="(x):Bool

					|bool FFI_FUNC_Q(install) (Value selfVal)
					|bool FFI_FUNC_X(3d3d) (Value selfVal, Value x)

			プログラマが関数を定義しない場合、C++クラスに同名の関数があるものとして自動的にそれを呼び出すコードが _HSca_クラス名.cpp 内に生成される。
				|class Foo
				|  c++ Bar {
				|    func1(Float x):Int
				|    func2(Bool b):String
				|  }
				|end

				HSca_Foo.cpp に func1,func2 を記述しなかった場合には、次の記述をしたものとほぼ同等の結果となる。

				|s32 FFI_FUNC(func1) (Value selfVal, f32 x)
				|{
				|  Bar* self = selfVal.toCppObj<Bar>();
				|  return self->func1(x);
				|}
				|const char* FFI_FUNC(func2) (Value selfVal, bool b)
				|{
				|  Bar* self = selfVal.toCppObj<Bar>();
				|  return self->func2(b);
				|}

			可変引数のメソッドや、例外を投げるメソッド、スレッドを操作するメソッドなど、単純な関数呼出しでは対応できない場合は、 FFI_FUNC では記述できない。
				DEEP_FFI_FUNC を使用する。
				HSca_クラス名.cpp に DEEP_FFI_FUNC が定義されている場合、コンパイラ
				は _HSca_クラス名.cpp 中に橋渡し関数を自動生成しない。
				DEEP_FFI_FUNC で記述するFFIは、橋渡し関数が行なっているようなスタック操作等をプログラマが記述しなければならない。

				DEEP_FFI_FUNCで定義する関数の引数は (Context* context, u8 numArgs) で、戻り値は void である。
				contextに必要な情報が全て入っている。
				スレッド上で動作しているなら、 context->thread がNULLではない値になっている。
				スタックトップには、selfの値が入っている。
					インスタンスメソッド呼び出しなら、インスタンスが、クラスメソッド呼び出しならクラスが入っているので、どちらかを判定するにはselfのtypeが HC_Class かどうかで判定できる。
						|Value selfVal = context->pop();
						|if (selfVal.type == HC_Class) クラスメソッド呼出し
				numArgs個の引数が、context内のstackに積まれている。左の引数から順番に積まれるので、スタックの2番目は一番右の引数になる。
				Hayat関数の戻り値は、引数を全部popした状態のスタックにpushしておく。
				詳細については、stdlibのFFIなどを参考にして欲しい。


			stdlibにおけるHayatクラス名とC++型名の対応
				Hayat	C++
				------	------
				Int	s32
				Float	f32
				Bool	bool
				String	const char*
				Object	Object*
				Symbol	SymbolID_t
				Class	HClass_t
				List	ValueList*
				Array	ValueArray*
				Hash	Hash*
				StringBuffer	StringBuffer*
				Thread	Thread*
				Exception	Exception*
				Nil	void (戻り値)
				不定	Value

			C++クラス内でHayatインスタンスを扱うような場合、garbage collection の対象となるようにしなければならない。
				HSca_クラス名.cpp 内で FFI_GCMARK_FUNC() を定義する必要がある。
				ArrayやHashなどのコンテナクラスをC++レベルで実現する場合は必須。
				詳細については、stdlibのFFIなどを参考にして欲しい。

		C++からの呼び出し
			C++からHayatのメソッドを呼び出す仕組み。
			即実行させる場合と、スレッドの動作をHayat VMに任せる場合がある。
				即実行させる場合
					Contextオブジェクトを生成、初期化する。
					即実行の関数を呼び出す。
					戻り値をスタックから取り出す。
					ContextオブジェクトをC++から参照しない事をHayatに通知する。
						Contextオブジェクトは、GCに回収される。
					例)
						|using namespace Hayat;
						|using namespace Hayat::Engine;
						|Context* context = gPackage.createContext(myBytecode.mainClass());
						|context->push(引数);
						|context->execMethod(インスタンス, メソッドのシンボル, 引数の個数);
						|Value retval = context->pop();
						|gPackage.releaseContext(context); // C++からのContextオブジェクト使用終了宣言
					即実行のための関数
						execMethod	メソッドの実行
						execMethod_ifExist	メソッドを呼び出す事が可能なら実行
						execBytecodeTop	バイトコードの先頭からの実行
			
				スレッドで動かす場合
					Contextオブジェクトを生成、初期化する。
					Threadオブジェクトを生成、初期化する。
					ContextとThreadを結びつける。
					Contextをメソッド呼び出し開始状態にする。
					場合によって、ContextオブジェクトをC++から参照しない事をHayatに通知する。
						Contextオブジェクトは、Threadが終了してどこからも参照されなくなると、GCに回収される。
					Thread実行開始。
					1フレームに1回、ThreadManagerを走らせる。
					必要なら、Threadの実行が終わるのをstate()でチェックする。
					例)
						|using namespace Hayat;
						|Context* context = gPackage.createContext(myBytecode.mainClass());
						|ThreadID_t threadID = gThreadManager.createThread();
						|Thread* pThread = gThreadManager.id2thread(threadID);
						|pThread->initialize(context);
						|context->push(引数);
						|context->push(インスタンス);
						|context->methodCall(メソッドのシンボル, 引数の個数);
						|pThread->start();
						|gPackage.releaseContext(context); // C++からのContextオブジェクト使用終了宣言
						|
						|// 1フレームに1回実行
						|gThreadManager.exec1tick();
						|
						|// 1フレームに1回チェック
						|Thread* pThread = gThreadManager.id2thread(threadID);
						|if (pthread->state() == TERMINATED) 終了 else まだ実行中
					メソッド開始状態にする関数
						methodCall	インスタンスメソッドの開始
						sMethodCall	暗黙selfのインスタンスメソッド、クラスメソッド、組み込み関数の開始
						callBytecodeTop	バイトコードの先頭からの開始
			インスタンスについて
				selfに相当するインスタンスとして、
					クラスを渡すとクラスメソッド呼出しとなる
					インスタンスを渡すとインスタンスメソッド呼出しとなる
				トップレベルメソッドを呼び出す場合
					インスタンスメソッド呼び出しする時
						|Value::fromObj(myBytecode.mainInstance())
					クラスメソッド呼び出しする時
						|Value::fromClass(myBytecode.mainClass())

	コンパイルオプション
		|-I path
			require命令、include命令のファイルを探すパスを追加する。
				require命令は、*.hypファイルを読み込む。
		|-o path
			出力ファイル(*.hyb,*.hyp,*.hdb)を置くパスを指定する。
			デフォルトは out
		|-zi path
			FFIソースファイル(HSca_*.cpp)を置いているパスを指定する。
			デフォルトは ffi
		|-zo path
			FFI関連自動生成ファイルを置くパスを指定する。
			デフォルトは ffiout
		|-ci charset
			入力スクリプトファイル(*.hy)のキャラクタセットを指定する。
		|-co charset
			出力バイトコードファイル(*.hyb)のキャラクタセットを指定する。
		|-m
			コンパイル時のメモリ使用量が減り、速度が低下する。
				スクリプトをパースする際に、メモ化機能を使わないようにする。
		|-Wlabel=N
			goto文の飛び先ラベルがどこかに存在するかどうかをチェックする。
			(到達可能かどうかはチェックしない)
				N=0	チェックしない
				N=1	ファイル内にラベルが無ければWARNINGを出す
				N=2	ブロック内にラベルが無ければWARNINGを出す
				N=1!	ファイル内にラベルが無ければERRORを出して停止
				N=2!	ブロック内にラベルが無ければERRORを出して停止
				デフォルトは、-Wlabel=2!
		|-Wnumsay=N
			sayCommandの個数を制限する。
				N=0	チェックしない
				N=x	sayCommandがx個を越えたらWARNINGを出す
				N=x!	sayCommandがx個を越えたらERRORを出して停止
				デフォルトは、-Wnumsay=0
		|-Wunknown=N
			所在が不明なクラス名やメソッド名があった場合の動作を指定する。
				N=0	チェックしない
				N=1	WARNINGを出す
				N=1!	ERRORを出して停止
				デフォルトは、-Wunknown=1
		|-s
			スクリプトをパースした結果の構文解析木を表示する。
		|-d
			パース途中状態をデバッグ表示する。
		|-d2
			パース途中状態を詳細にデバッグ表示する。
