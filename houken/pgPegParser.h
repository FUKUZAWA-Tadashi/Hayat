/* this file is generated by 'houken' parser generator */
#ifndef m_PGPEGPARSER_H_
#define m_PGPEGPARSER_H_

#include "hpParser.h"

using namespace Hayat::Parser;

extern void p__init(void);
extern void errorCutMessage(hyu32 pos, const char* message);

#define USER_PARSER(name)                       \
  class ST_##name : public SyntaxTree {         \
  public:                                       \
      ST_##name(Parser* p, hyu32 startPos, hyu32 endPos, SyntaxTree::Childs* ch = NULL) : SyntaxTree(p, startPos, endPos, ch) {} \
      void action(void); \
  };                                            \
  class P_##name : public UserParser {          \
  public: P_##name(void) : UserParser(#name) {} \
      SyntaxTree* uParse(void);                 \
      SyntaxTree* createSyntaxTree(hyu32 startPos, SyntaxTree::Childs* childs = NULL) { \
        return new ST_##name(this, startPos, m_curPos(), childs); } \
  };                                            \
  extern P_##name *      p_##name

#define GEN_PARSER(name)                       \
  class ST_##name : public SyntaxTree {        \
  public:                                      \
      ST_##name(Parser* p, hyu32 startPos, hyu32 endPos, SyntaxTree::Childs* ch = NULL) : SyntaxTree(p, startPos, endPos, ch) {} \
      void action(void); \
  };                                           \
  class P_##name : public GenParser {          \
  public: P_##name(void) : GenParser(#name) {} \
      void construct(void);                    \
      void actionAtParse(SyntaxTree*);         \
      SyntaxTree* createSyntaxTree(hyu32 startPos, SyntaxTree::Childs* childs = NULL) { \
        return new ST_##name(this, startPos, m_curPos(), childs); } \
  };                                           \
  extern P_##name *      p_##name

#define GEN_PARSER_E(name)                     \
  class ST_##name : public SyntaxTree {        \
  public:                                      \
      ST_##name(Parser* p, hyu32 startPos, hyu32 endPos, SyntaxTree::Childs* ch = NULL) : SyntaxTree(p, startPos, endPos, ch) {} \
      void action(void); \
  };                                           \
  class P_##name : public GenParser {          \
  public: P_##name(void) : GenParser(#name) {} \
      void construct(void);                    \
      void actionAtParse(SyntaxTree*);         \
      void errorMessage(int errorId, hyu32 pos); \
      SyntaxTree* createSyntaxTree(hyu32 startPos, SyntaxTree::Childs* childs = NULL) { \
        return new ST_##name(this, startPos, m_curPos(), childs); } \
  };                                           \
  extern P_##name *      p_##name

#define OPERATOR_PARSER(name)                  \
  class ST_##name : public SyntaxTree {        \
  public:                                      \
      ST_##name(Parser* p, hyu32 startPos, hyu32 endPos, SyntaxTree::Childs* ch = NULL) : SyntaxTree(p, startPos, endPos, ch) {} \
      void action(void); \
  };                                                \
  class P_##name : public OperatorParser {          \
  public: P_##name(void) : OperatorParser(#name) {} \
      void construct(void);                         \
      SyntaxTree* createSyntaxTree(hyu32 startPos, SyntaxTree::Childs* childs = NULL) { \
        return new ST_##name(this, startPos, m_curPos(), childs); } \
      SyntaxTree* createSyntaxTree(hyu32 startPos, hyu32 endPos, SyntaxTree::Childs* childs = NULL) { \
        return new ST_##name(this, startPos, endPos, childs); } \
  };                                                \
  extern P_##name *      p_##name

GEN_PARSER(Start);
GEN_PARSER(Directives);
GEN_PARSER_E(Direc_userAction);
GEN_PARSER(ActionParam);
GEN_PARSER(Direc_ownMes);
GEN_PARSER(Rules);
GEN_PARSER(Rule);
GEN_PARSER(DummyRule);
GEN_PARSER(ErrorMesDef);
GEN_PARSER(Disjunction);
GEN_PARSER(Conjunction);
GEN_PARSER(PrefixExp);
GEN_PARSER(SuffixExp);
GEN_PARSER(Term);
GEN_PARSER(Term1);
GEN_PARSER(Term2);
GEN_PARSER_E(ErrorCut);
GEN_PARSER(OperatorDef);
GEN_PARSER_E(UnaryOp);
GEN_PARSER_E(BinaryOp);
GEN_PARSER_E(TernaryOp);
USER_PARSER(Number);
GEN_PARSER(AndPred);
GEN_PARSER(NotPred);
GEN_PARSER(NoTree);
GEN_PARSER(Optional);
GEN_PARSER(ZeroOrMore);
GEN_PARSER(OneOrMore);
USER_PARSER(Ident);
USER_PARSER(NotTokenPred);
GEN_PARSER(EndOfFile);
GEN_PARSER(AnyChar);
GEN_PARSER(String);
GEN_PARSER(Token);
GEN_PARSER(Range);
GEN_PARSER(XChar);
GEN_PARSER(XCharH);
GEN_PARSER(XCharU);
GEN_PARSER(XCharE);
GEN_PARSER(XCharA);
GEN_PARSER(Hex1);
GEN_PARSER(Spc);
USER_PARSER(Comment);
#undef USER_PARSER
#undef GEN_PARSER
#undef GEN_PARSER_E
#undef OPERATOR_PARSER


#endif
